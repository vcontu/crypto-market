{
  "openapi": "3.0.2",
  "info": {
    "title": "Conf-service App",
    "description": "CryptoMarket Application API Documentation",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "localhost server"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "User Listing"
        ],
        "summary": "List all users",
        "operationId": "ListAllUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListUser"
                  }
                },
                "examples": {
                  "first": {
                    "$ref": "#/components/examples/ListUsers"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationFailed"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create new user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationFailed"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "User Listing"
        ],
        "summary": "Get user by username",
        "operationId": "getUserDetails",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUser"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationFailed"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user by username",
        "operationId": "deleteUsingDELETE",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "user login",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Username"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationFailed"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Requester-Username"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "400 Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiStatus"
            },
            "example": {
              "status": "400 Bad Request",
              "message": "Request object validation failure.",
              "errorCode": 5400
            }
          }
        }
      },
      "AuthenticationFailed": {
        "description": "401 Authentication Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiStatus"
            },
            "example": {
              "status": "401 Unauthorized",
              "message": "Requester johndoe does not exist.",
              "errorCode": 1000
            }
          }
        }
      },
      "AuthorizationFailed": {
        "description": "403 Forbidden Access",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiStatus"
            },
            "example": {
              "status": "403 Forbidden",
              "message": "Requester johndoe is currently suspended. Please, contact the administrator.",
              "errorCode": 2100
            }
          }
        }
      },
      "NotFound": {
        "description": "404 Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiStatus"
            },
            "example": {
              "status": "404 Not Found",
              "message": "User johndoe does not exist",
              "errorCode": 4100
            }
          }
        }
      },
      "InternalServerError": {
        "description": "500 Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiStatus"
            },
            "example": {
              "status": "500 Internal Server Error",
              "message": "Unknown internal error",
              "errorCode": 9999
            }
          }
        }
      }
    },
    "schemas": {
      "GetUser": {
        "title": "GetUser",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "maxLength": 32,
            "pattern": "^(?=.{5,32}$)(?![0-9])[a-z0-9]+$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPND",
              "INACTV"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        },
        "example": {
          "username": "jdoe",
          "email": "john.doe@gmail.com",
          "status": "ACTIVE",
          "createdOn": "2018-11-13T20:20:39",
          "updatedOn": "2020-01-05T15:20:07",
          "updatedBy": "admin"
        },
        "additionalProperties": false
      },
      "ListUser": {
        "title": "ListUser",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "maxLength": 32,
            "pattern": "^(?=.{5,32}$)(?![0-9])[a-z0-9]+$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPND",
              "INACTV"
            ]
          }
        },
        "example": {
          "username": "jdoe",
          "email": "john.doe@gmail.com",
          "status": "ACTIVE"
        },
        "additionalProperties": false
      },
      "CreateUser": {
        "title": "PostUser",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "maxLength": 32,
            "pattern": "^(?=.{5,32}$)(?![0-9])[a-z0-9]+$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPND",
              "INACTV"
            ]
          }
        },
        "required": [
          "username",
          "email",
          "status"
        ],
        "example": {
          "username": "jdoe",
          "email": "john.doe@gmail.com",
          "status": "ACTIVE"
        },
        "additionalProperties": false
      },
      "Username": {
        "type": "string",
        "example": "johndoe"
      },
      "ApiStatus": {
        "title": "Api Error Status",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errorCode": {
            "type": "number"
          }
        },
        "additionalProperties": false
      }
    },
    "examples": {
      "ListUsers": {
        "summary": "list of users",
        "value": "[\n  {\n    \"username\": \"luke\",\n    \"email\": \"luke@starwars.org\",\n    \"status\": \"ACTIVE\"\n  },\n  {\n    \"username\": \"ajoe\",\n    \"email\": \"mail@users.net\",\n    \"status\": \"SUSPND\"\n  }\n]\n"
      }
    }
  }
}